* To copy from Ansible master to other clients, use remote_src:no

- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy a new "ntp.conf file into place, backing up the original if it differs from the copied version
     copy:
      src: /home/ansible/dev/ntf.conf
      dest: /home/ec2-user/ntf.conf
      owner: ansible
      group: ansible
      mode: '0644'
      remote_src: no
      backup: yes

  ===================================================================================================================================

  * If we want to copy from cilent machine to client, remote_src:yes

- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy a new "ntp.conf file into place, backing up the original if it differs from the copied version
     copy:
      src: /home/ec2-user/ntf.conf
      dest: /home/ec2-user/ntf.conf
      owner: ansible
      group: ansible
      mode: '0644'
      remote_src: yes
      backup: yes

  * with backup: yes, it will check for file exist with same name, if yes it will create a copy of it first and then replace it.

* we can check with this command if file exists

  ls -ltrh /home/ansible/test_file
  
=============================================================================================================================================================

*******************************************************************************************************************
---
- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy file with owner and permissions
     copy:
      src: /var/tmp/foo.conf
      dest: /tmp/foo.conf
      owner: ansible
      group: ansible
      mode: '0644'

*******************************************************************************************************************
---
- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy file with owner and permission, using symbolic representation
     copy:
      src: /var/tmp/foo.conf
      dest: /tmp/foo1.conf
      owner: ansible
      group: ansible
      mode: u=rw,g=r,o=r

*******************************************************************************************************************
---
- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Another symbolic mode example, adding some permissions and removing others
     copy:
      src: /var/tmp/foo.conf
      dest: /tmp/foo2.conf
      owner: ansible
      group: ansible
      mode: u+rw,g-wx,o-rwx
*******************************************************************************************************************
from ansible server to all clients

---
- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy a new "ntp.conf file into place, backing up the original if it differs from the copied version
     copy:
      src: /etc/ntp.conf
      dest: /etc/ntp.conf
      owner: ansible
      group: ansible
      mode: '0644'
      backup: yes
*******************************************************************************************************************
Copying Files between Directories on Remote Machine

Ansible copy allows you to copy the files from one directory to another on the same remote machine. But this is only for files, not for the directories. You can use the remote_src parameter to let Ansible know your intentions.

The below code will copy /tmp/test.txt to the home directory of the user (/home/[username]/).

--- 
- name: copy the file within client machines itself
  hosts: all
  tasks:
   - name: create a file with some content
     copy:
      content: "local file"
      dest: /tmp/test.txt
   - name: copy the file within client machines itself
     copy:
      src: /tmp/test.txt
      dest: /var/tmp/test.{{ansible_date_time.date}}.txt
      remote_src: yes

*******************************************************************************************************************
Influence whether the remote file must always be replaced.
        If `yes', the remote file will be replaced when contents are different than the
        source.
        If `no', the file will only be transferred if the destination does not exist.
        Alias `thirsty' has been deprecated and will be removed in 2.13.

--- 
- name: copy the file 
  hosts: all
  tasks:
  - name: Ansible copy file force  
    copy:  
      src: /etc/hosts  
      dest: /etc/hosts
      backup: yes	  
      force: no
	  
	  
*******************************************************************************************************************
How to write plain text into a file on the remote host with copy
You can write plain text to a file using the content parameter.

--- 
- name: create a file with content 
  hosts: all
  tasks:
   - name: write plain text into a file on the remote host
     copy:
      dest: $HOME/test_file
      content: "Hello, World!"
	  
check your root home directory

cat /root/test_file

*******************************************************************************************************************

Setting a different owner with become: true:

--- 
- name: create a file with content 
  hosts: all
  tasks:
   - name: copy file between directories on remote with root as the owner (become required)
     copy:
      src: $HOME/test_file
      remote_src: true
      dest: "/home/{{ ansible_user }}/test_file"
      owner: root
      group: root
      mode: 0644
     become: true
  
ls -ltrh /home/ansible/test_file

*******************************************************************************************************************
How to backup a file if copy needs to overwrite it
By default, the copy module will overwrite a file if it already exists on the remote host. If you want to backup the file before it is overwritten, use the backup parameter:

- name: copy file from local host to remote host with backup
  copy:
    src: test_file
    dest: $HOME/test_file
    backup: true

*******************************************************************************************************************
How to write templated text into a file on the remote host with copy
You can write templated text to a file using the content parameter. Although this is fine for simple one-line files, if you want to write multi-line templated text to a file, please use the template module.

- name: write templated text into a file on the remote host
  copy:
    dest: $HOME/test_file
    content: "Hello, {{ ansible_user }}!"

*******************************************************************************************************************
